package router

import (
	"go-api/config"
	"go-api/inject"
	"go-api/internal/adapter/http/middleware"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	"go-api/docs" // docs is generated by Swag CLI, you have to import it.
)

// @contact.name   API Support
// @contact.url    http://www.swagger.io/support
// @contact.email  support@swagger.io

// @license.name  Apache 2.0
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html
func Init(init *inject.Initialization) *gin.Engine {
	router := gin.New()
	router.Use(gin.Logger())
	router.Use(gin.Recovery())

	// Adding Cors
	corsConfig := cors.DefaultConfig()
	corsConfig.AllowOrigins = config.ConfigInstance.Server.CORSAllowedOrigins
	router.Use(cors.New(corsConfig))

	// programmatically set swagger info
	docs.SwaggerInfo.Title = "Swagger Example API"
	docs.SwaggerInfo.Description = "This is a sample server go-api server."
	docs.SwaggerInfo.Version = "1.0"
	docs.SwaggerInfo.Host = "go-api.swagger.io"
	docs.SwaggerInfo.BasePath = "/v1"
	docs.SwaggerInfo.Schemes = []string{"http", "https"}

	// use ginSwagger middleware to serve the API docs
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	router.GET("/ping", func(ctx *gin.Context) {
		ctx.JSON(200, gin.H{
			"message": "pong",
		})
	})

	public := router.Group("/api")
	public.POST("/login", init.LoginController.Login)
	public.GET("/users", init.UserController.GetUsers)
	public.GET("/user/:userId", init.UserController.GetUserById)
	public.POST("/user", init.UserController.CreateUser)
	public.GET("/products", init.ProductController.GetProducts)
	public.POST("/product", init.ProductController.CreateProduct)
	public.GET("/product/:productId", init.ProductController.GetProductById)

	protected := router.Group("/api/protected")
	protected.Use(middleware.JwtAuthMiddleware())
	protected.PUT("/user/:userId", init.UserController.UpdateUser)
	protected.DELETE("/user/:userId", init.UserController.DeleteUser)
	protected.POST("/user/:userId/update-password", init.UserController.UpdatePassword)
	protected.DELETE("/product/:productId", init.ProductController.DeleteProduct)
	protected.PUT("/product/:productId", init.ProductController.UpdateProduct)

	return router
}
